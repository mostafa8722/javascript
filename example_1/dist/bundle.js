/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ (() => {

eval("const fun1 = function () {};\r\nconst fun2 = function () {\r\n  const obj = {};\r\n  return obj;\r\n};\r\n\r\nclass user {}\r\nconst singleTon = function () {};\r\nconst obj1 = {};\r\nconst obj2 = new Object();\r\nconst obj3 = Object.create(null);\r\nconst obj4 = new fun1();\r\nconst obj5 = new fun2();\r\nconst obj6 = new user();\r\nconst obj7 = new singleTon();\r\n\r\nconsole.log(\"objects....\");\r\nconsole.log(obj1);\r\nconsole.log(obj2);\r\nconsole.log(obj3);\r\nconsole.log(obj4);\r\nconsole.log(obj5);\r\nconsole.log(obj6);\r\nconsole.log(obj7);\r\n\r\nconsole.log(Object.getPrototypeOf(obj1));\r\nconsole.log(Object.getPrototypeOf(obj2));\r\nconsole.log(Object.getPrototypeOf(obj3));\r\nconsole.log(Object.getPrototypeOf(obj4));\r\nconsole.log(Object.getPrototypeOf(obj5));\r\nconsole.log(Object.getPrototypeOf(obj6));\r\nconsole.log(Object.getPrototypeOf(obj7));\r\n\r\n// call,apply,bind\r\nconst obj_person1 = {\r\n  name: \"mostafa\",\r\n  family: \"nazarband\",\r\n};\r\nconst fun3 = function (age, year) {\r\n  console.log(this.name + \" \" + this.family + \"\\n\" + age + \" \" + year);\r\n};\r\nfun3.apply(obj_person1, [20, 1300]);\r\nfun3.call(obj_person1, 30, 1400);\r\nfun3.bind(obj_person1, 40, 1500)();\r\n\r\n// slice  , imutable\r\nconst arr1_slice = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\nconst arr2_slice = arr1_slice.slice(2); // [3,4,5,6,7,8,9,10]\r\nconst arr3_slice = arr1_slice.slice(2, 5); // index of 5-1 [3,4,5]\r\nconst arr4_slice = arr1_slice.slice(4, 2); // index of 2-1 []\r\n\r\nconsole.log(arr1_slice);\r\nconsole.log(arr2_slice);\r\nconsole.log(arr3_slice);\r\nconsole.log(arr4_slice);\r\n\r\n// splice\r\nconst arr1_splice = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n//const arr2_splice = arr1_splice.splice(2); //  arr1_splice is [1,2] , arr2_splice is [3,4,5,6,7,8,9,10]\r\n//const arr2_splice = arr1_splice.splice(2,5); //  arr1_splice is [1,2,8,9,10] , last index is 5-1+2(6) arr2_splice is [3,4,5,6,7]\r\nconst arr2_splice = arr1_splice.splice(2, 5, 13, 15); //  arr1_splice is [1,2,13,15,8,9,10] , last index is 5-1+2(6) arr2_splice is [3,4,5,6,7]\r\nconsole.log(arr1_splice);\r\nconsole.log(arr2_splice);\r\n\r\n// first order && pure\r\nconst fun4 = function () {\r\n  console.log(\"first order\");\r\n};\r\n\r\n// high order\r\nconst func5 = function (func) {\r\n  return fun4;\r\n};\r\n\r\nfunc5(fun4());\r\n\r\n// var , let , const\r\n// var is a global scope\r\n// let is block scope (local scope)\r\n// const is block scope and notchangeable\r\n\r\n// json\r\nconst json1 = { name: \"ali\", family: \"nazar\" };\r\n\r\nconst json3 = JSON.stringify(json1);\r\nconst json2 = JSON.parse(json3);\r\nconsole.log(json2);\r\nconsole.log(json2.hasOwnProperty(\"name\"));\r\n//console.log(json2.hasOwn(\"name\"));\r\nconsole.log(json2.isPrototypeOf(json1));\r\nconsole.log(json3);\r\n\r\nconst unaryFunc = (a, b, c) => a + b + c;\r\nconst curryfunc = (a) => (b) => (c) => a + b + c;\r\nconsole.log(curryfunc(1)); // (b)=\r\nconsole.log(curryfunc(1)); // (b)=\r\nconsole.log(curryfunc(1)(2)(3)); // (b)=>(c)=>a+b+c\r\n\r\nconst aa = 1;\r\nswitch (aa) {\r\n  case 0:\r\n    console.log(\"this is zero\");\r\n    break;\r\n  case 1: {\r\n    let name = \"mostafa\";\r\n    console.log(\"this is one\");\r\n    break;\r\n  }\r\n  case 2:\r\n    let name = \"mostafa\";\r\n    console.log(\"this is two\");\r\n    break;\r\n  default:\r\n    console.log(\"unknow\");\r\n    break;\r\n}\r\n\r\n// IIFE Immediately Invoked Function Expression\r\n(function () {\r\n  console.log(message); // undefined\r\n  var message;\r\n  console.log(\"Immediately Invoked Function Expression\");\r\n})();\r\n//console.log(message) refrence error\r\nconst AddMemoization = () => {\r\n  let cache = {};\r\n  return (value) => {\r\n    if (value in cache) {\r\n      console.log(\"cached before ...\");\r\n\r\n      return cache[value];\r\n    } else {\r\n      console.log(\"caching ...\");\r\n      let res = \"the result is \" + value;\r\n      cache[value] = res;\r\n      return res;\r\n    }\r\n  };\r\n};\r\nconst addMemoization = AddMemoization();\r\nconsole.log(addMemoization(30));\r\nconsole.log(addMemoization(20));\r\nconsole.log(addMemoization(30));\r\n\r\n// closure\r\nconst welcomeClosure = function (name) {\r\n  return function (message1, message2) {\r\n    console.log(message1 + message2 + \" \" + name);\r\n  };\r\n};\r\n\r\nconst welcome = welcomeClosure(\"mostafa\");\r\nwelcome(\"welcome \", \"to\");\r\nwelcome(\"welcome \", \"to mr\");\r\n\r\nlocalStorage.setItem(\"name\", \"mostaf nazar\");\r\nconsole.log(sessionStorage.getItem(\"name\"));\r\nconsole.log(localStorage.getItem(\"name\"));\r\nlocalStorage.removeItem(\"name2\");\r\nlocalStorage.clear();\r\n\r\n// web Worker\r\nlet ii = 0;\r\nconst timeCountWorker = function () {\r\n  ii += 1;\r\n\r\n  postMessage(ii);\r\n  // setTimeout(\"timeCountWorker()\",500)\r\n};\r\ntimeCountWorker();\r\n\r\n// Promise\r\nconst promise = new Promise((resolve, reject) => {\r\n  resolve(\"fullfilled\");\r\n});\r\npromise.then((value) => console.log(value));\r\n\r\nconst promise2 = new Promise(\r\n  (resolve) => {\r\n    setTimeout(() => {\r\n      resolve(\"this is resolved\");\r\n    }, 1000);\r\n  },\r\n  (reject) => {\r\n    setTimeout(() => {\r\n      console.log(\"this is rejected\");\r\n    }, 2000);\r\n  }\r\n);\r\n\r\npromise2.then((val) => console.log(val)).catch((val) => console.log(val));\r\n//console.log(promise2)\r\n\r\nconst sum = [1, 2, 3].reduce((total, number) => total + number);\r\nconsole.clear(sum);\r\n\r\nconst promise3 = new Promise((resolve, reject) => {\r\n  resolve(\"fullfilled1\");\r\n});\r\nconst promise4 = new Promise((resolve, reject) => {\r\n  reject(\"rejected4\");\r\n});\r\nconst promise5 = new Promise((resolve, reject) => {\r\n  reject(\"rejected\");\r\n});\r\n\r\nconst promise6 = new Promise((resolve, reject) => {\r\n  setTimeout(() => {\r\n    resolve(\"resolve6\");\r\n  }, 100);\r\n});\r\nconst promise7 = new Promise((resolve, reject) => {\r\n  setTimeout(() => {\r\n    reject(\"rejected7\");\r\n  }, 200);\r\n});\r\nPromise.all([promise3, promise4, promise5])\r\n  .then((res) => console.log(\"promise resolve\", res[0]))\r\n  .catch((err) => console.log(\"promise reject\", err));\r\nPromise.race([promise6, promise7])\r\n  .then((res) => console.log(\"race resovle\", res))\r\n  .catch((err) => console.log(\"race reject\", err));\r\n\r\nlet user11 = { name: \"mostafa\", family: \"nazar\" };\r\nconsole.log(user11);\r\ndelete user11.name;\r\nconsole.log(user11);\r\n\r\nconsole.log(navigator.platform);\r\n\r\nconst input = document.querySelector(\"input\");\r\nconsole.log(input.getAttribute(\"type\"));\r\nconsole.log(input.getAttribute(\"value\"));\r\n\r\nconst aaa = \"Hello World!\";\r\nconst aaa2 = /Heldlo/i;\r\nconsole.log(aaa.includes(\"hello\"));\r\nconsole.log(aaa.includes(\"Hello\"));\r\nconsole.log(aaa.indexOf(\"Hello2\"));\r\nconsole.log(aaa2.test(aaa));\r\nconsole.log(aaa.search(aaa2));\r\n/*console.log(location.href)\r\nconsole.log(location.protocol)\r\nconsole.log(location.port)\r\nconsole.log(location.pathname)\r\nconsole.log(location.hostname)\r\nconsole.log(location.hash)\r\nconsole.log(location.search)*/\r\n\r\nconst obj123 = { name: \"mostafaww\" };\r\nObject.freeze(obj123);\r\n//Object.seal(obj123)\r\nobj123.name = \"ali\";\r\nobj123.family = \"ali\";\r\nconsole.log(obj123);\r\nconsole.log(navigator.language);\r\nconsole.log(navigator.languages);\r\n\r\nconst obj1_assign = { a: 1, b: 2, c: 3 };\r\nconst obj2_assign = { a: 4, c: 5 };\r\nconst obj3_assign = Object.assign(obj1_assign, obj2_assign);\r\nconst obj4_assign = Object.assign({}, obj2_assign);\r\nconsole.log(obj1_assign);\r\nconsole.log(obj2_assign);\r\nconsole.log(obj3_assign);\r\nconsole.log(obj3_assign == obj1_assign);\r\nconsole.log(obj3_assign === obj1_assign);\r\nconsole.log(obj4_assign === obj2_assign);\r\nconsole.log(obj4_assign == obj2_assign);\r\n\r\nfor (let [key, val] of Object.entries(obj1_assign)) {\r\n  console.log(key);\r\n  console.log(val);\r\n}\r\nfor (let val of Object.values(obj1_assign)) {\r\n  console.log(val);\r\n}\r\nfor (let key of Object.keys(obj1_assign)) {\r\n  console.log(key);\r\n}\r\n\r\nlet obj_set = {a:\"name\",b:'ali',c:\"reza\",d:\"hossein\",d:\"amir\"}\r\n\r\nlet obj_set2 = new Set();\r\nobj_set2.add(obj_set)\r\n\r\nconsole.log(obj_set)\r\nconsole.log(obj_set2)\r\nconsole.log(obj_set2.size)\r\nconsole.log(obj_set2.has(obj_set))\r\n\r\n\r\nconst arr_set = [\"a\",\"b\",\"c\",\"a\"]\r\nconst arr_set2 =new Set(arr_set);\r\nconsole.log(arr_set2)\r\nconsole.log(arr_set2.size)\r\nconsole.log(arr_set2.has(\"a\"))\r\nconsole.log(arr_set2.has(\"aa\"))\r\nconsole.log(arr_set2.delete(\"a\"))\r\nconsole.log(arr_set2)\r\n\r\n// encoding url\r\nlet urrl = \"https://www.google.com?q=مصطفی\"\r\nconsole.log(encodeURI(urrl))\r\n\r\nconst fruits = new Map([\r\n    [\"apples\", 500],\r\n    [\"bananas\", 300],\r\n    [\"oranges\", 200]\r\n  ]);\r\n  fruits.set(\"penapple\",500)\r\n  console.log(fruits)\r\n  console.log(fruits.size)\r\n  console.log(fruits.keys())\r\n\r\n  console.log(fruits.values())\r\n  console.log(fruits.entries())\r\n\r\n  for(let key of fruits.keys()){\r\nconsole.log(key)\r\n  }\r\n\r\n\r\n\r\n  let obj_accessor = {\r\n    firstName:\"mostaf\",\r\n    lastName:\"nazar\",\r\n    set SetName(name){\r\n    this.firstName = name;\r\n    },\r\n    get getName(){\r\n        return this.firstName+\" \"+this.lastName;\r\n    }\r\n  }\r\n  console.log(obj_accessor)\r\n  console.log(obj_accessor.getName)\r\n  obj_accessor.SetName = \"ali\"\r\n  console.log(obj_accessor)\r\n\r\n  let obj_pr = {};\r\n  Object.defineProperty(obj_pr,\"name\",{\r\n    value:\"mostafa\",\r\n    writable:false\r\n  })\r\n  console.log(obj_pr)\r\n\r\n  const iteratable = [\"a\",\"b\",\"c\"];\r\n  const iterator = iteratable[Symbol.iterator]()\r\n\r\n  console.log(iterator.next())\r\n  console.log(iterator.next())\r\n  console.log(iterator.next())\r\n  console.log(iterator.next())\r\n\r\n  const bbb =  [2,3,5,1,2]\r\nconsole.log(bbb.sort((a,b)=>b-a))\r\nconsole.log(Math.min(...bbb))\r\nconsole.log(Math.max(...bbb))\r\nvar x = 20;\r\nx= (x++,x++,3*x)\r\nconsole.log(x)\r\n\r\nfor(var i=0;i<4;i++) {\r\n  setTimeout(()=>console.log(i))\r\n}\r\n\r\nfor(let i=0;i<4;i++) {\r\n  setTimeout(()=>console.log(i))\r\n}\r\nlet ss = \"heko peter\";\r\nlet ss2 = /Heko/i\r\nlet ss3 = 1.2\r\nconsole.log(ss2.test(ss))\r\nconsole.log(~~ss3)\r\nconsole.log(ss.repeat(3))\r\n// shallow copy\r\nlet bb = {name:\"mostafa\",family:\"nazar\",age:12}\r\nlet bb2= bb;\r\nbb2.age = 22;\r\nconsole.log(bb)\r\nconsole.log(bb2)\r\n\r\n// deep copy\r\nlet bb3 = {name:bb.name,family:bb.family,age:bb.age}\r\nbb3 .age =32;\r\nconsole.log(bb)\r\nconsole.log(bb3)\r\nconsole.log(\"ggg\",+!+[])\r\nlet cc = [false,NaN,undefined,null,1,3];\r\nconsole.log(cc.filter(Boolean))\r\nlet ac = new Set([1,2,3,4,5,6,7,7]);\r\nconsole.log(ac.size);\r\nconsole.log(ac.has(2));\r\nconsole.log(...ac);\r\n\r\nconst countries = [\r\n  {name:\"iran\",code:98},\r\n  {name:\"USA\",code:1},\r\n  {name:\"UAE\",code:97},\r\n  {name:\"Turkey\",code:90}\r\n]\r\n\r\nlet codes =Array.from(countries,({code})=>code)\r\n//console.log(`%c ${codes}`,'color:red;background:blue')\r\n\r\n//console.table(countries)\r\n\r\n// primitive data types : ,  string ,number,boolean, null , undefined\r\n\r\nconsole.log(\"primitive data types\")\r\nlet rr = \"ali\"\r\nlet rr2 = rr\r\n rr = \"mostafa\"\r\n\r\nconsole.log(rr)\r\nconsole.log(rr2)\r\n\r\nlet gg = {name:\"ali\"}\r\nlet gg2 = gg;\r\ngg.name = \"hossein2\"\r\n\r\nconsole.log(gg)\r\nconsole.log(gg2)\r\n\r\nlocalStorage.setItem(\"name\",\"ditty.ir\")\r\nconsole.log(localStorage)\r\nconsole.log(localStorage.getItem(\"name\"))\r\nlocalStorage.clear();\r\nconsole.log(localStorage.getItem(\"name\"))\r\nconsole.log(localStorage)\r\n// banana\r\n\r\nvar str = \"ba\"+ +\"a\"+\"a\";\r\nconsole.log(str.toLocaleLowerCase())\r\n\r\nfor(var i=0;i<10;i++){\r\n\r\n}\r\n\r\nvar obj= {name:\"mostafa\",family:\"nazar\"}\r\nvar arr= [\"mostafa\",\"nazar\"];\r\nfor (var a in obj){\r\n  console.log(a)\r\n}\r\n\r\nfor (var a of arr){\r\n  console.log(a)\r\n}\r\n\r\narr = [1,1,3,4,4,4,5];\r\nconsole.log(...new Set(arr))\r\n\r\nvar mm =  true && \"ali\";\r\nvar mm2 =  true &&  \"ali\";\r\nvar mm3 = \"ali\" || 0;\r\nvar mm4 = \"ali\" || 0 || 0;\r\nvar mm5 = +\"3\";\r\n\r\nconsole.log(\"mmmmmmmmmmm===>\")\r\nconsole.log(mm) // ali\r\nconsole.log(mm2)// ali\r\nconsole.log(mm3)// ali\r\nconsole.log(mm4)// ali\r\nconsole.log(typeof mm5)\r\n\r\nconst bvv = [3, 2, 1];\r\nconsole.log(bvv)\r\nconsole.log(bvv.sort())\r\nconsole.log(bvv.sort()===bvv)\r\n\r\nconst x10 = parseInt('10')\r\nconst y10 = x10\r\n\r\nconsole.log(x10 === y10)\r\n\r\n\r\n\r\n// closure function ...\r\nfunction init(){\r\n\r\n  var counter_closure = 10;\r\n  return function jump(){\r\n    counter_closure ++;\r\n    return counter_closure;\r\n  }\r\n}\r\n\r\nlet jump =init();\r\nconsole.log(\"jump closure\");\r\nconsole.log(jump());  //11\r\nconsole.log(jump()); //12\r\nconsole.log(jump());//13\r\nvar xx = \"\"\r\nconsole.log(!!xx ? \"this is true\": \"this is false\");\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://example_1/./src/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/main.js"]();
/******/ 	
/******/ })()
;